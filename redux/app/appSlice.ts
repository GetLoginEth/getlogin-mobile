import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../store'

export interface AppState {
  isLogged: boolean
  status: 'idle' | 'loading' | 'failed'
  balanceXdai: string
  balanceXbzz: string
}

const initialState: AppState = {
  isLogged: false,
  status: 'idle',
  balanceXdai: '0',
  balanceXbzz: '0',
}

export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {
  const response = { data: 1 } //await fetchCount(amount);

  // The value we return becomes the `fulfilled` action payload
  return response.data
})

export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // decrement: (state) => {
    //     // state.value -= 1;
    // },
    setIsLogged: (state, action: PayloadAction<boolean>) => {
      state.isLogged = action.payload
    },
    setBalance: (state, action: PayloadAction<{ xdai: string; xbzz: string }>) => {
      state.balanceXdai = action.payload.xdai
      state.balanceXbzz = action.payload.xbzz
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(incrementAsync.pending, state => {
        state.status = 'loading'
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        // state.value += action.payload;
      })
  },
})

export const { setIsLogged, setBalance } = appSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;
export const selectStatus = (state: RootState) => state.counter.status
export const selectIsLogged = (state: RootState) => state.counter.isLogged
export const selectBalance = (state: RootState) => ({
  xdai: state.counter.balanceXdai,
  xbzz: state.counter.balanceXbzz,
})

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//     dispatch,
//     getState
// ) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default appSlice.reducer
